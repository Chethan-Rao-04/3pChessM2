@startuml
participant GameService
participant GameState
participant BoardAdapter
participant BoardService
participant ChessPiece
participant MovementUtil
participant Hawk
participant Vortex

-> GameService: OnClick
activate GameService

alt first click
    GameService -> BoardAdapter: GeneratePolygonId
    activate BoardAdapter
    BoardAdapter --> GameService: polygon PositionOnBoard
    deactivate BoardAdapter

    GameService -> BoardService: isCurrentPlayersPiece
    activate BoardService
    BoardService --> GameService: return true/false
    deactivate BoardService

    GameService -> BoardService: getPossibleMoves
    activate BoardService
    BoardService -> ChessPiece: getMovablePositions
    activate ChessPiece

    alt if piece is Hawk
        ChessPiece -> Hawk: calculateHawkMoves
        activate Hawk
        Hawk --> ChessPiece: List<PositionOnBoard>
        deactivate Hawk
    else if piece is Vortex
        ChessPiece -> Vortex: calculateVortexMoves
        activate Vortex
        Vortex --> ChessPiece: List<PositionOnBoard>
        deactivate Vortex
    else
        ChessPiece -> MovementUtil: calculateNextPositionOrNull
        note right: checks for each direction
        activate MovementUtil
        MovementUtil --> ChessPiece: PositionOnBoard
        deactivate MovementUtil
    end

    BoardService <-- ChessPiece: List<PositionOnBoard>
    deactivate ChessPiece
    GameService <-- BoardService: List<PositionOnBoard> highlight polygons
    deactivate BoardService

else second click
    GameService -> BoardService:ExecuteMove
    activate BoardService

    BoardService -> BoardService: ValidateMove
    BoardService -> BoardService: IsKingInCheck
    activate BoardService

    BoardService -> ChessPiece: getMovablePositions
    activate ChessPiece

    alt if piece is Hawk
        ChessPiece -> Hawk: calculateHawkMoves
        activate Hawk
        Hawk --> ChessPiece: List<PositionOnBoard>
        deactivate Hawk
    else if piece is Vortex
        ChessPiece -> Vortex: calculateVortexMoves
        activate Vortex
        Vortex --> ChessPiece: List<PositionOnBoard>
        deactivate Vortex
    else
        ChessPiece -> MovementUtil: calculateNextPositionOrNull
        note right: checks for each direction
        activate MovementUtil
        MovementUtil --> ChessPiece: PositionOnBoard
        deactivate MovementUtil
    end

    note left: checks if king is present in highlight polygons
    BoardService <-- ChessPiece: List<PositionOnBoard>
    deactivate ChessPiece

    BoardService -> BoardService: IsKingInCheckAfterLegalMove
    note right: internally uses IsKingInCheck\nreturns nothing
    BoardService -> BoardService: IsKingInCheckMate
    deactivate BoardService
end

GameService -> BoardAdapter: convertPossibleMovesToStringRep
GameService <-- BoardAdapter: List<String> highlight Polygons

alt Game over
    GameService -> BoardService: checkIfGameOver
    activate BoardService
    GameService <-- BoardService: game status
    deactivate BoardService
    GameService -> GameState: setGameOver
    activate GameState
    deactivate GameState
else Not yet
end

<-- GameService: click Response
deactivate GameService
@enduml